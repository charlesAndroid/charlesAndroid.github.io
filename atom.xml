<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Charles</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://charlesandroid.github.io/"/>
  <updated>2017-06-05T06:41:41.000Z</updated>
  <id>http://charlesandroid.github.io/</id>
  
  <author>
    <name>Charles</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式笔记(十五)原型设计模式</title>
    <link href="http://charlesandroid.github.io/2017/05/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0(%E5%8D%81%E4%BA%94)%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://charlesandroid.github.io/2017/05/31/设计模式笔记(十五)原型设计模式/</id>
    <published>2017-05-31T08:57:05.000Z</published>
    <updated>2017-06-05T06:41:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><p>原型模式是创建型模式的一种,其特点在于通过“复制”一个已经存在的实例来返回新的实例,而不是新建实例。被复制的实例就是我们所称的“原型”，这个原型是可定制的。</p>
<h3 id="模式成员"><a href="#模式成员" class="headerlink" title="模式成员"></a>模式成员</h3><p><code>Prototype</code> :抽象原型类,克隆方法的定义接口/类<br><code>ConcretePrototype</code> :具体原型类,实现<code>Prototype</code>   </p>
<p> <img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/Prototype.png" alt=""></p>
<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>原型模式多用于创建复杂的或者耗时的实例，因为这种情况下，复制一个已经存在的实例使程序运行更高效；或者创建值相等，只是命名不一样的同类数据。<br><strong>优点</strong>:效率高,减少重新创建一个复杂对象的耗时<br><strong>缺点</strong>:扩展性差,<code>clone</code>方法扩展时必须修改原代码,多层对象嵌套,每个类都要实现<code>Prototype</code></p>
<h2 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h2><h3 id="java-lang-Object"><a href="#java-lang-Object" class="headerlink" title="java.lang.Object"></a>java.lang.Object</h3><pre><code>protected Object clone() throws CloneNotSupportedException {
    if (!(this instanceof Cloneable)) {
        throw new CloneNotSupportedException(...);       
    }

    return internalClone();
}
private native Object internalClone();
</code></pre><p>虽然<code>Object</code>为超类,但要使用<code>clone</code>方法,需要实现<code>Cloneable</code>接口,否则抛出异常.<code>Cloneable</code>为空接口,做标记用.</p>
<h4 id="java-lang-Cloneable"><a href="#java-lang-Cloneable" class="headerlink" title="java.lang.Cloneable"></a>java.lang.Cloneable</h4><pre><code>public interface Cloneable {
}
</code></pre><h4 id="android-util-IntArray"><a href="#android-util-IntArray" class="headerlink" title="android.util.IntArray"></a>android.util.IntArray</h4><pre><code>public class IntArray implements Cloneable {
    private int[] mValues;
    ...
    @Override
    public IntArray clone() throws CloneNotSupportedException {
        final IntArray clone = (IntArray) super.clone();
        clone.mValues = mValues.clone();
        return clone;
    }
}
</code></pre><p><code>IntArray</code>的<code>clone</code>方法实现克隆本身,并且克隆成员<code>mValues</code>.</p>
<h4 id="android-content-Intent"><a href="#android-content-Intent" class="headerlink" title="android.content.Intent"></a>android.content.Intent</h4><pre><code>@Override
public Object clone() {
    return new Intent(this);
}
</code></pre><p><code>Intent</code>的<code>clone</code>方法没有调用父类的克隆,而是通过<code>new</code>关键字来创建的,并把自己作为参数传入新创建的<code>Intent</code></p>
<pre><code>public Intent(Intent o) {
    this.mAction = o.mAction;
    this.mData = o.mData;
    this.mType = o.mType;
    this.mPackage = o.mPackage;
    this.mComponent = o.mComponent;
    this.mFlags = o.mFlags;
    this.mContentUserHint = o.mContentUserHint;
    if (o.mCategories != null) {
        this.mCategories = new ArraySet&lt;String&gt;(o.mCategories);
    }
    if (o.mExtras != null) {
        this.mExtras = new Bundle(o.mExtras);
    }
    if (o.mSourceBounds != null) {
        this.mSourceBounds = new Rect(o.mSourceBounds);
    }
    if (o.mSelector != null) {
        this.mSelector = new Intent(o.mSelector);
    }
    if (o.mClipData != null) {
        this.mClipData = new ClipData(o.mClipData);
    }
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h2&gt;&lt;p&gt;原型模式是创建型模式的一种,其特点在于通过“复制”一个已经存在的实例来返回新的实例,而不是新建实例。被复制的实例就是我们所称
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式笔记(十四)工厂设计模式总结</title>
    <link href="http://charlesandroid.github.io/2017/05/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0(%E5%8D%81%E5%9B%9B)%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://charlesandroid.github.io/2017/05/26/设计模式笔记(十四)工厂设计模式总结/</id>
    <published>2017-05-26T08:57:05.000Z</published>
    <updated>2017-05-24T01:47:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>简单工厂和工厂方法解决<code>一维数组</code>问题,<strong>每增加一种属性对应只增加一种类型</strong><br>抽象工厂解决<code>二维数组</code>问题, <strong>两个属性对应一个对象时,类型为二维数组,用不同工厂来控制一个维度,用不同方法来控制第二个维度,能顺利解决二维数组问题</strong><br>控制维度的方法:类、方法、方法参数,这三种方式都可以解决单一维度,任意两个相互组合解决两层维度的问题.  </p>
<h4 id="解决三个维度问题"><a href="#解决三个维度问题" class="headerlink" title="解决三个维度问题"></a>解决<code>三个维度</code>问题</h4><p><strong>方法1:</strong> 结合类、方法、方法参数三种方式,当确定是哪个类的哪个方法的哪种参数对应的返回值时(三维需要<code>x,y,z</code>来确定唯一),确定唯一对象.<br><strong>方法2:</strong> 一维数组嵌套二维数组,用简单工厂或工厂方法模式生产出抽象工厂解决一个维度,在用抽象工厂解决剩下两个维度.<br><strong>每种方法实际可读性不强,程序复杂度很高,在设计时,最好找到两个最重要的维度来控制对象类型,把维度控制在两个以内</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;简单工厂和工厂方法解决&lt;code&gt;一维数组&lt;/code&gt;问题,&lt;strong&gt;每增加一种属性对应只增加一种类型&lt;/strong&gt;&lt;br&gt;抽象
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式笔记(十三)抽象工厂设计模式</title>
    <link href="http://charlesandroid.github.io/2017/05/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0(%E5%8D%81%E4%B8%89)%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://charlesandroid.github.io/2017/05/25/设计模式笔记(十三)抽象工厂设计模式/</id>
    <published>2017-05-25T08:57:05.000Z</published>
    <updated>2017-05-24T01:47:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><p>抽象工厂模式（Abstract factory pattern）是一种对象创建型设计模式。抽象工厂模式提供了一种方式，可以将一组具有同一主题的单独的工厂封装起来。在正常使用中，客户端程序需要创建抽象工厂的具体实现，然后使用抽象工厂作为接口来创建这一主题的具体对象。客户端程序不需要知道（或关心）它从这些内部的工厂方法中获得对象的具体类型，因为客户端程序仅使用这些对象的通用接口。抽象工厂模式将一组对象的实现细节与他们的一般使用分离开来。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>结合简单工厂和工厂方法模式,创造更多同类型不同属性,同属性不同类型的对象,同时使类的数量下降.</p>
<h3 id="模式成员"><a href="#模式成员" class="headerlink" title="模式成员"></a>模式成员</h3><p><code>Factory</code> :抽象工厂,每个方法提供创建同类型不同属性的产品,不同方法提供创建同属性不同类型的产品.<br><code>ConcreteFactory</code> :具体工厂实现类<br><code>Product</code> :产品基类<br><code>ConcreteProduct</code>: 产品实现类<br><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/AbstractFactory.png" alt=""></p>
<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>一个生产包装盒的工厂,现在需要生产<code>盒装</code>和<code>桶装</code>的两种包装盒,材料有<code>塑料</code>和<code>铁质</code>两种,一共有<code>4种</code>产品,而且每一个属性都有可能扩展.<br><strong>简单工厂:</strong> 实现很简单,把每一种组合标记一种类型,<code>switch</code>加上<code>4个case</code>,每增加一个属性,对应增加<code>2个case</code>.<br><strong>工厂方法:</strong> 同样把<code>4种</code>类型的对象和工厂各创建一份一共<code>8个</code>类,每增加一个属性,增加<code>4个类</code>.<br><strong>抽象工厂:</strong> <code>2个</code>工厂<code>塑料工厂,铁质工厂</code>,每个工厂<code>2个</code>方法<code>生产盒装,生产桶装</code>,对应产品<code>塑料盒装,塑料桶装,铁质盒装,铁质桶装</code>,举例:生产<code>铁质盒装</code>,调用<code>铁质工厂-&gt;生产盒装方法</code>.<br><strong>优点:</strong> 解决类型或属性不同的问题,类的数量和方法数量少.<br><strong>缺点:</strong> 局限性,如果没有<code>塑料桶装</code>,工厂仍然要实现该方法.如果扩展属性,必然需要修改<code>ConcreteFactory</code>的代码,违背<code>开闭原则</code>  </p>
<h2 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h2><h3 id="android-view-LayoutInflater-Factory"><a href="#android-view-LayoutInflater-Factory" class="headerlink" title="android.view.LayoutInflater$Factory"></a>android.view.LayoutInflater$Factory</h3><pre><code>public interface Factory {
    public View onCreateView(String name, Context context, AttributeSet attrs);
   }
</code></pre><h3 id="android-view-LayoutInflater-Factory2"><a href="#android-view-LayoutInflater-Factory2" class="headerlink" title="android.view.LayoutInflater$Factory2"></a>android.view.LayoutInflater$Factory2</h3><pre><code>public interface Factory2 extends Factory {
   public View onCreateView(View parent, String name, Context context, AttributeSet attrs);
}
</code></pre><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>android.app.FragmentManagerImpl<br>android.app.Activity</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h3 id="android-view-LayoutInflater-FactoryMerger"><a href="#android-view-LayoutInflater-FactoryMerger" class="headerlink" title="android.view.LayoutInflater$FactoryMerger"></a>android.view.LayoutInflater$FactoryMerger</h3><pre><code>private static class FactoryMerger implements Factory2 {
    private final Factory mF1, mF2;
    private final Factory2 mF12, mF22;
    FactoryMerger(Factory f1, Factory2 f12, Factory f2, Factory2 f22) {
        mF1 = f1;
        mF2 = f2;
        mF12 = f12;
        mF22 = f22;
    }
    public View onCreateView(String name, Context context, AttributeSet attrs) {
        View v = mF1.onCreateView(name, context, attrs);
        if (v != null) return v;
        return mF2.onCreateView(name, context, attrs);
    }

    public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
        View v = mF12 != null ? mF12.onCreateView(parent, name, context, attrs)
                : mF1.onCreateView(name, context, attrs);
        if (v != null) return v;
        return mF22 != null ? mF22.onCreateView(parent, name, context, attrs)
                : mF2.onCreateView(name, context, attrs);
    }
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h2&gt;&lt;p&gt;抽象工厂模式（Abstract factory pattern）是一种对象创建型设计模式。抽象工厂模式提供了一种方式，可以将
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式笔记(十二)工厂方法设计模式</title>
    <link href="http://charlesandroid.github.io/2017/05/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0(%E5%8D%81%E4%BA%8C)%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://charlesandroid.github.io/2017/05/24/设计模式笔记(十二)工厂方法设计模式/</id>
    <published>2017-05-24T08:57:05.000Z</published>
    <updated>2017-05-23T07:27:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><p>工厂方法模式（Factory method pattern）是一种实现了<code>工厂</code>概念的面向对象设计模式。就像其他创建型模式一样，它也是处理在不指定对象具体类型的情况下创建对象的问题。属于类创建型设计模式.</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在简单工厂的基础上,定义一个创建对象的<code>Factory</code>接口，通过不同实现,创建不同对象.</p>
<h3 id="模式成员"><a href="#模式成员" class="headerlink" title="模式成员"></a>模式成员</h3><p><code>Factory</code> :工厂接口,抽象创建对象的方法<br><code>ConcreteFactory</code> :创建产品的<code>Factory</code>具体实现类<br><code>Product</code> :产品基类,可以是抽象类,可以是接口<br><code>ConcreteProduct</code> : <code>Product</code>的实现类<br><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/FactoryMethod.png" alt=""></p>
<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>解决简单工厂的扩展性问题,为了增加新类型产品,不违背<code>开闭原则</code>去修改<code>Factory</code>代码.<br>简单工厂代码:</p>
<pre><code>class Factory{
        static final String PRODUCT_A = &quot;A&quot;;
        static final String PRODUCT_B = &quot;B&quot;;
        static final String PRODUCT_C = &quot;C&quot;;
        static final String PRODUCT_D = &quot;D&quot;;
        static final String PRODUCT_E = &quot;E&quot;;
        static Product createProduct(String type){
            switch (type){
                case PRODUCT_A:
                    return new ProductA();
                case PRODUCT_B:
                    return new ProductB();
                case PRODUCT_C:
                    return new ProductC();
                   case PRODUCT_D:
                    return new ProductD();
                case PRODUCT_E:
                    return new ProductE();
                default:
                    return null;
            }            
        }
    }

...
Product a = Factory.createProduct(Factory.PRODUCT_A);
</code></pre><p>使用工厂方法:  </p>
<pre><code>interface Factory{
    Product createProduct();
}
...
class FactoryA implements Factory{

    @Override
    public Product createProduct(){
        return new ProductA();
    }
}
...
class FactoryE implements Factory{

    @Override
    public Product createProduct(){
        return new ProductE();
    }
}
...
public static float getProductPrice(Factory factory){
    Product product = factory.createProduct();
    return product.getPrice();
}
...
public static void main(String args[]){
    float price = getProductPrice(new FactoryB());
    System.out.println(&quot;Product price:&quot; + price);
}
</code></pre><p><strong>优点:</strong> 扩展性强,新增加类型只需要增加对应的工厂实现类,在调用时<code>getProductPrice</code>传入对应的工厂类.<br><strong>缺点:</strong> 每增加一种类型就需要增加两个类,一个产品实体类,一个工厂类.</p>
<h2 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h2><h3 id="1-android-support-v4-view-LayoutInflaterFactory"><a href="#1-android-support-v4-view-LayoutInflaterFactory" class="headerlink" title="1.android.support.v4.view.LayoutInflaterFactory"></a>1.android.support.v4.view.LayoutInflaterFactory</h3><pre><code>public interface LayoutInflaterFactory {
    public View onCreateView(...);
}
</code></pre><p>工厂实现类:  </p>
<pre><code>android.support.v4.app.FragmentManager$FragmentManagerImpl
android.support.v7.AppCompatDelegateImplV9  
</code></pre><h4 id="android-support-v4-view-LayoutInflaterCompat-LayoutInflaterCompatImpl"><a href="#android-support-v4-view-LayoutInflaterCompat-LayoutInflaterCompatImpl" class="headerlink" title="android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatImpl"></a>android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatImpl</h4><p>使用:</p>
<pre><code>interface LayoutInflaterCompatImpl {
    public void setFactory(..., LayoutInflaterFactory factory);
    ...
}
</code></pre><h3 id="2-android-database-sqlite-SQLiteDatabase-CursorFactory"><a href="#2-android-database-sqlite-SQLiteDatabase-CursorFactory" class="headerlink" title="2.android.database.sqlite.SQLiteDatabase$CursorFactory"></a>2.android.database.sqlite.SQLiteDatabase$CursorFactory</h3><pre><code>public interface CursorFactory {
    public Cursor newCursor(...);
}
</code></pre><h4 id="android-database-sqlite-SQLiteDirectCursorDriver"><a href="#android-database-sqlite-SQLiteDirectCursorDriver" class="headerlink" title="android.database.sqlite.SQLiteDirectCursorDriver"></a>android.database.sqlite.SQLiteDirectCursorDriver</h4><p>使用:</p>
<pre><code>public Cursor query(CursorFactory factory, ...) {
    ...        
    final Cursor cursor;
    try {
        ...
        if (factory == null) {
            ...
        } else {
            cursor = factory.newCursor(...);
        }
    } catch (RuntimeException ex) {
        ...
    }

    ...
    return cursor;
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h2&gt;&lt;p&gt;工厂方法模式（Factory method pattern）是一种实现了&lt;code&gt;工厂&lt;/code&gt;概念的面向对象设计模式
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式笔记(十一)简单工厂设计模式</title>
    <link href="http://charlesandroid.github.io/2017/05/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0(%E5%8D%81%E4%B8%80)%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://charlesandroid.github.io/2017/05/23/设计模式笔记(十一)简单工厂设计模式/</id>
    <published>2017-05-23T08:57:05.000Z</published>
    <updated>2017-05-23T07:57:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><p>简单工厂模式又叫做静态工厂方法（Static Factory Method）模式，但不属于23种GOF设计模式之一。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式，可以理解为是不同工厂模式的一个特殊实现。  </p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>提供一个根据传入参数来分别创建、返回不同对象的方法,这些对象通常继承/实现同一个父类/接口,或是类型相同,属性不同.</p>
<h3 id="模式成员"><a href="#模式成员" class="headerlink" title="模式成员"></a>模式成员</h3><p><code>Factory</code> :工厂类,负责创建所需产品对象<br><code>Product</code> :产品基类,可以是抽象类,可以是接口<br><code>ConcreteProduct</code> : <code>Product</code>的实现类<br><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/StaticFactory.png" alt=""></p>
<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>把同一类型的类创建<code>new Product()</code>,封装到同一个类当中,简化代码.<br>原代码:</p>
<pre><code>Product a = new ProductA();
Product b = new ProductB();
Product c = new ProductC();
Product d = new ProductD();
Product e = new ProductE();
</code></pre><p>使用简单工厂:  </p>
<pre><code>Product a = Factory.createProduct(0); 
Product b = Factory.createProduct(1); 
Product c = Factory.createProduct(2); 
Product d = Factory.createProduct(3); 
Product e = Factory.createProduct(4); 
</code></pre><p>参数也可以是<code>String</code>类型,另一种方式是使用不同的方法名称来创建不同的对象</p>
<pre><code>Product a = Factory.createProductA(); 
Product b = Factory.createProductB(); 
Product c = Factory.createProductC(); 
Product d = Factory.createProductD(); 
Product e = Factory.createProductE(); 
</code></pre><p><strong>优点:</strong> 代码统一,对象初始化的在同一个地方,便于查找和修改.<br><strong>缺点:</strong> 拓展性差,添加新类型需要修改<code>Factory</code>.</p>
<h2 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h2><h4 id="1-Product-Factory"><a href="#1-Product-Factory" class="headerlink" title="1.Product$Factory"></a>1.Product$Factory</h4><p>根据传入不同参数创建不同类型对象</p>
<pre><code>interface Product{
    float getPrice();
    class Factory{
        static final String PRODUCT_A = &quot;A&quot;;
        static final String PRODUCT_B = &quot;B&quot;;
        static final String PRODUCT_C = &quot;C&quot;;
        static final String PRODUCT_D = &quot;D&quot;;
        static final String PRODUCT_E = &quot;E&quot;;
        static Product createProduct(String type){
            switch (type){
                case PRODUCT_A:
                    return new ProductA();
                case PRODUCT_B:
                    return new ProductB();
                case PRODUCT_C:
                    return new ProductC();
                   case PRODUCT_D:
                    return new ProductD();
                case PRODUCT_E:
                    return new ProductE();
                default:
                    return null;
            }            
        }
    }
}
</code></pre><h4 id="2-com-android-documentsui-services-Job-Factory"><a href="#2-com-android-documentsui-services-Job-Factory" class="headerlink" title="2.com.android.documentsui.services.Job$Factory"></a>2.com.android.documentsui.services.Job$Factory</h4><p>根据不同方法名称创建不同对象</p>
<pre><code>static class Factory {
    static final Factory instance = new Factory();

    Job createCopy(...) {
        ...            
        return new CopyJob(...);
    }

    Job createMove(...) {
        ...
        return new MoveJob(...);
    }

    Job createDelete(...) {
        ...
        return new DeleteJob(...);
    }
}
</code></pre><h4 id="3-android-text-Editable-Factory"><a href="#3-android-text-Editable-Factory" class="headerlink" title="3.android.text.Editable$Factory"></a>3.android.text.Editable$Factory</h4><p>根据传入不同参数,创建相同对象,但对象初始化属性不同,这里还结合了饿汉单例模式</p>
<pre><code>    public static class Factory {
    private static Editable.Factory sInstance = new Editable.Factory();

    public static Editable.Factory getInstance() {
        return sInstance;
    }

    public Editable newEditable(CharSequence source) {
        return new SpannableStringBuilder(source);
    }
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h2&gt;&lt;p&gt;简单工厂模式又叫做静态工厂方法（Static Factory Method）模式，但不属于23种GOF设计模式之一。简单工厂
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式笔记(十)单例设计模式</title>
    <link href="http://charlesandroid.github.io/2017/05/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0(%E5%8D%81)%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://charlesandroid.github.io/2017/05/22/设计模式笔记(十)单例设计模式/</id>
    <published>2017-05-22T08:57:05.000Z</published>
    <updated>2017-05-23T07:56:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><p>单例模式是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中一个类只有一个实例,即一个类只有一个对象实例,属于类创建型设计模式   </p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在一个系统中,某个类<code>A</code>,代码中要保证执行一次<code>A a = new A()</code>,而且只执行一次,并且句柄可以供其他类使用.</p>
<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>为什么系统中要保证一个类只有一个实例呢?<br>比如一个房间的总电源只有一个,为了保证开关同步,方便管理,如果有两个,那么一个开一个关,屋里的家电就不知道该怎么办了.单例模式就很好的解决了这一问题,对于总电源管理这个类<code>PowerManager</code>采用单例模式,提供统一的电源状态成员变量<code>powerState</code>,并且提供统一的开启和关闭电源的方法<code>open</code>,<code>close</code>,在节省内存的前提下,也统一了电源状态的管理和方法的调用.<br><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/powermanager.png" alt=""></p>
<h2 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h2><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p>1.私有化本类构造方法<br>2.创建一个私有静态本类对象实例<br>3.提供静态方法,返回实例</p>
<h4 id="1-android-security-SystemKeyStore"><a href="#1-android-security-SystemKeyStore" class="headerlink" title="1.android.security.SystemKeyStore"></a>1.android.security.SystemKeyStore</h4><pre><code>private static SystemKeyStore mInstance = new SystemKeyStore();  
private SystemKeyStore() { }  
public static SystemKeyStore getInstance() {  
    return mInstance;  
}    
</code></pre><p>饿汉式另一种方式<br>1.私有化本类构造方法<br>2.创建一个私有静态内部类<br>3.在内部类中,创建一个私有静态外部类对象实例<br>4.提供静态方法,返回实例</p>
<h4 id="2-MySigleton"><a href="#2-MySigleton" class="headerlink" title="2.MySigleton"></a>2.MySigleton</h4><pre><code>public class MySigleton{
    private MySigleton(){}
    private static class Holder {
        private static MySigleton instance = new MySigleton();
    }
    public static MySigleton getInstance() {
        return Holder.instance;
    }
}
</code></pre><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><p>不同于饿汉式的是使用时再去初始化本类的实例,又称延迟加载.由于考虑多线程安全问题,所以在方法体加上<code>synchronized</code>关键字.</p>
<h4 id="3-com-android-settingslib-bluetooth-LocalBluetoothManager"><a href="#3-com-android-settingslib-bluetooth-LocalBluetoothManager" class="headerlink" title="3.com.android.settingslib.bluetooth.LocalBluetoothManager"></a>3.com.android.settingslib.bluetooth.LocalBluetoothManager</h4><pre><code>private static LocalBluetoothManager sInstance;
public static synchronized LocalBluetoothManager getInstance(...) {
    if (sInstance == null) {
        ...
        sInstance = new LocalBluetoothManager(...);
        ...
    }
    return sInstance;
}  
</code></pre><p>为了提高方法执行效率,同时保证线程安全,使用<code>synchronized</code>同步代码块替换方法上的同步标签.</p>
<h4 id="4-com-android-server-SystemConfig"><a href="#4-com-android-server-SystemConfig" class="headerlink" title="4.com.android.server.SystemConfig"></a>4.com.android.server.SystemConfig</h4><pre><code>static SystemConfig sInstance;
public static SystemConfig getInstance() {
    synchronized (SystemConfig.class) {
        if (sInstance == null) {
            sInstance = new SystemConfig();
        }
        return sInstance;
    }
}  
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h2&gt;&lt;p&gt;单例模式是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中一个类只有一个实例
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式笔记(九)设计原则总结</title>
    <link href="http://charlesandroid.github.io/2017/05/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0(%E4%B9%9D)%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E6%80%BB%E7%BB%93/"/>
    <id>http://charlesandroid.github.io/2017/05/19/设计模式笔记(九)设计原则总结/</id>
    <published>2017-05-19T08:57:05.000Z</published>
    <updated>2017-05-22T03:43:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式的根基是设计原则,设计原则的根基是高内聚,低耦合,万变不离其中,各种原则或模式在代码上的体现有可能会是一样的,但不代表任何一种原则或模式是多余的,因为一部分代码符合多种原则是正常的,对于每一种原则和模式,都应该在生活中找到对应的结构,举一反三,慢慢体会.<br>在这些原则中,个人认为最重要的是单一职责和开闭原则,因为他俩最直接的代表解决内聚和耦合的问题时的原则,是其他原则的基础.最难理解也是最难遵守的是单一职责原则,因为它的界限在有的时候很难界定.对于设计思想的提升,还是多看高质量的代码,站在巨人的肩膀上,当我们遵从这些原则,编写出高质量的代码时,那么这些代码,一定属于后面的二十三种设计模式,所以是选择根据原则去设计代码,然后代码与设计模式必然的重叠,还是多了解设计模式,运用设计模式去编写符合原则的代码,显然后者开发效率是最高的,但前者学习收获是最大的.<br>之后的设计模式会站在<code>Android/Java</code>的角度上去分析.<code>What</code>它没那么神奇,<code>Why</code>它为了解决一些问题,<code>Where</code>前人是如何使用.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计模式的根基是设计原则,设计原则的根基是高内聚,低耦合,万变不离其中,各种原则或模式在代码上的体现有可能会是一样的,但不代表任何一种原则或模式是多余的,因为一部分代码符合多种原则是正常的,对于每一种原则和模式,都应该在生活中找到对应的结构,举一反三,慢慢体会.&lt;br&gt;在这
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式笔记(八)迪米特法则</title>
    <link href="http://charlesandroid.github.io/2017/05/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0(%E5%85%AB)%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/"/>
    <id>http://charlesandroid.github.io/2017/05/18/设计模式笔记(八)迪米特法则/</id>
    <published>2017-05-18T09:02:05.000Z</published>
    <updated>2017-05-17T10:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>迪米特法则（Law of Demeter）一个软件实体应当尽可能少地与其他实体发生相互作用.它又叫作最少知道原则（Least Knowledge Principle 简写LKP），就是说一个对象应当对其他对象有尽可能少的了解,不和陌生人说话。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="生活中"><a href="#生活中" class="headerlink" title="生活中"></a>生活中</h3><p>去银行存钱,我们也不知道钱存到哪里,怎么存的,只关心账户上的余额.</p>
<h3 id="代码中"><a href="#代码中" class="headerlink" title="代码中"></a>代码中</h3><p>我们和硬件,系统没有直接打交道,开辟线程通过<code>Thread</code>类来实现<br><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/thread.png" alt=""><br>所有代码的<code>API</code>具体实现我们都可以不知道,只关心它如何使用,对于<code>尽可能少的了解</code>:<br>1.对本类和父类<br>2.对本类持有的成员变量<br>3.对本类方法返回值为某一类的对象实例<br>本类除以上三点对于任何外部类,保持最少了解.</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>因公司需要定位功能,现在引进第三方定位SDK,获取用户位置信息<br><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/location.png" alt=""><br>由于该第三方SDK改为收费项目,公司决定替换SDK,采用另一家免费公司,修改<code>main</code>方法显然违背了开闭原则,所以现修改如下:<br><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/locationadapter.png" alt=""><br>虽然替换SDK的工作仍然要修改原代码,但应用有可能在多个地方调用,改成只修改<code>LocationAdapter</code>一处代码,而且修改的类由<code>main</code>函数到<code>LocationAdapter</code>,减少了对业务逻辑的影响.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>引用第三方SDK,显然属于<code>最少知道</code>的范畴,如果第三方的类成为了本类的成员变量,而本类只是用来操作位置相关信息,那么本类对于三方SDK又不属于<code>最少知道</code>的范畴,如<code>LocationAdapter</code>,如果本类还要处理另外的逻辑,如<code>Main</code>,虽然符合了迪米特法则,但是违背了单一职责原则.对于外部的引用,本应用最少了解,必然造成类数量的上升,合理安排哪些沟通需要中间类来搭建桥梁,哪些不需要,控制类的数量,减少代码体积.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;迪米特法则（Law of Demeter）一个软件实体应当尽可能少地与其他实体发生相互作用.它又叫作最少知道原则（Least Knowled
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式笔记(七)合成复用原则</title>
    <link href="http://charlesandroid.github.io/2017/05/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0(%E4%B8%83)%E5%90%88%E6%88%90%E5%A4%8D%E7%94%A8%E5%8E%9F%E5%88%99/"/>
    <id>http://charlesandroid.github.io/2017/05/17/设计模式笔记(七)合成复用原则/</id>
    <published>2017-05-17T08:57:05.000Z</published>
    <updated>2017-05-17T10:11:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>合成复用原则就是指在一个新的对象里通过关联关系（包括组合关系和聚合关系）来使用一些已有的对象，使之成为新对象的一部分；新对象通过委派调用已有对象的方法达到复用其已有功能的目的。简言之：要尽量使用组合/聚合关系，少用继承,多用Has,少用Is.</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="生活中"><a href="#生活中" class="headerlink" title="生活中"></a>生活中</h3><p>公司老板可以管理所有岗位的员工实现公司的正常运转,而没有必要去学习所有技能,这里把管理看做组合/聚合,把学习看做继承/实现</p>
<h3 id="代码中"><a href="#代码中" class="headerlink" title="代码中"></a>代码中</h3><p><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/system.png" alt=""><br><code>System</code>类的<code>getProperty</code>方法,最终由成员变量<code>props</code>来实现</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>设计一个员工模型,要求携带办公工具<br><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/tool.png" alt=""><br>由于科技发展,部分员工使用原有的<code>File</code>办公,部分员工替换办公工具,使用<code>Computer</code>办公.无论修改<code>Tool</code>还是<code>Employee</code>,都违背了开闭原则,现需改如下:<br><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/tools.png" alt=""><br>只要在员工初始化的时候指定使用工具,对成员变量<code>tool</code>赋值就可以区分了.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里的继承,也包括java中的实现接口,<code>JDK1.8</code>中接口可以默认实现方法,子类去继承,所以,无论单继承还是多继承语言,只要分析好子类与父类之间的关系是<code>Has</code>还是<code>Is</code>,就比较容易区分使用<code>组合/聚合</code>还是<code>继承/实现</code>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;合成复用原则就是指在一个新的对象里通过关联关系（包括组合关系和聚合关系）来使用一些已有的对象，使之成为新对象的一部分；新对象通过委派调用已有
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式笔记(六)接口隔离原则</title>
    <link href="http://charlesandroid.github.io/2017/05/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0(%E5%85%AD)%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/"/>
    <id>http://charlesandroid.github.io/2017/05/16/设计模式笔记(六)接口隔离原则/</id>
    <published>2017-05-16T08:57:05.000Z</published>
    <updated>2017-05-17T10:10:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>接口隔离原则(ISP–Interface Segregation Principle),一个类对另一个类的依赖应该建立在最小的接口上,不应依赖其不需要的接口.</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="生活中"><a href="#生活中" class="headerlink" title="生活中"></a>生活中</h3><p>音乐学院应该实现音乐培训接口,而不应该实现庞大的培训接口,包含不需要厨艺培训和挖掘机培训</p>
<h3 id="代码中"><a href="#代码中" class="headerlink" title="代码中"></a>代码中</h3><p><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/arraylist.png" alt=""><br>图中每一个接口都包含自己本类应该具备的职能,<code>ArrayList</code>实现了图中的4个接口,而不是统一的一个接口,符合接口隔离原则</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>设计一个登录页面,实现登录成功后展示动画效果<br><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/Login.png" alt=""><br>产品上线后发现在修改密码页面,修改密码成功后也需要展示动画效果,那么如果新建一个<code>ModifyPage</code>,实现<code>ILogin</code>接口,必然要实现<code>login</code>方法,违背了接口隔离原则,现修改如下:  </p>
<p><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img//modify.png" alt="">  </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最小接口的定义要遵从单一职责原则,也不能过分拆分,导致后期维护成本上升</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;接口隔离原则(ISP–Interface Segregation Principle),一个类对另一个类的依赖应该建立在最小的接口上,不应依
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式笔记(五)依赖倒转原则</title>
    <link href="http://charlesandroid.github.io/2017/05/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0(%E4%BA%94)%E4%BE%9D%E8%B5%96%E5%80%92%E8%BD%AC%E5%8E%9F%E5%88%99/"/>
    <id>http://charlesandroid.github.io/2017/05/15/设计模式笔记(五)依赖倒转原则/</id>
    <published>2017-05-15T08:57:05.000Z</published>
    <updated>2017-05-17T10:12:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>依赖倒置原则（Dependence Inversion Principle）是程序要依赖于抽象接口，不要依赖于具体实现。简单的说就是要求对抽象进行编程，不要对实现进行编程。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="生活中"><a href="#生活中" class="headerlink" title="生活中"></a>生活中</h3><p>部门里的所有人,都具备完成一件工作的能力(实现方法<code>ganHuo()</code>),那么即便负责这件事的那个人离职了,也将有人可以去代替.</p>
<h3 id="代码中"><a href="#代码中" class="headerlink" title="代码中"></a>代码中</h3><p><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/button.png" alt=""><br>对按钮设置点击事件,传入的是处理点击事件的接口对象,在方法中把传入对象赋值给成员变量<code>mOnClickListener</code>,在使用的时候只调用<code>mOnClickListener.onClick</code>方法来执行,具体执行的结果,依赖子类的实现.</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>提供一个可以从配置文件中读取配置信息字符串的转换类<code>FileConvertor</code><br><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/FileConvertor.png" alt=""><br>现在由于调整,之前读取<code>File</code>改成读取<code>XML</code>格式的配置文件,不光要增加一个<code>XMLConvertor</code>的类,还要修改<code>Main</code>的<code>getConfig</code>方法,所以修改如下<br><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/convertor.png" alt=""><br><code>Main</code>不在关心是谁来读取配置文件,只要需要传入具备读取配置文件功能的<code>Convertor</code>,调用<code>readSource</code>方法,拿到返回的<code>String</code>信息即可.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果一个类要用通过外部的对象来实现方法,那么这个时候方法传入的对象尽可能是抽象的.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;依赖倒置原则（Dependence Inversion Principle）是程序要依赖于抽象接口，不要依赖于具体实现。简单的说就是要求对抽
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式笔记(四)里氏代换原则</title>
    <link href="http://charlesandroid.github.io/2017/05/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0(%E5%9B%9B)%E9%87%8C%E6%B0%8F%E4%BB%A3%E6%8D%A2%E5%8E%9F%E5%88%99/"/>
    <id>http://charlesandroid.github.io/2017/05/14/设计模式笔记(四)里氏代换原则/</id>
    <published>2017-05-14T08:57:05.000Z</published>
    <updated>2017-05-17T10:11:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="生活中"><a href="#生活中" class="headerlink" title="生活中"></a>生活中</h3><p>可以用哺乳动物来表示的地方,也可以用人来表示,用人来表示的地方,可以用男人或女人来表示  </p>
<h3 id="代码中"><a href="#代码中" class="headerlink" title="代码中"></a>代码中</h3><p><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/bufferreader.png" alt=""><br>在<code>BufferReader</code>的构造方法中需要传入<code>Reader</code>对象,这些地方可以传入<code>Reader</code>的子类,或者子类的子类.这里<code>BufferReader</code>也是<code>Reader</code>的子类,由子类继承父类,构造方法注入父类对象并提供额外的功能,这种设计模式为<code>包装设计模式</code>.</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>实现一个计算两个数字和的方法<code>sum</code><br><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/math.png" alt=""><br>现在新需求,提供一个计算两个数和,并乘以100.程序员小Li发现<code>Math</code>类中已经提供了<code>sum</code>方法,所以用<code>Count</code>继承了<code>Math</code>类,重写<code>sum</code>方法,在原先的返回值上直接乘以100.此时已经违背了里氏代换原则,由于<code>Math</code>类是提供计算的方法,<code>Count</code>虽然具备计算的能力<code>sum</code>,但实际功能已经被修改,无法再代替父类出现的地方,所以再重写的时候,要注意此原则.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>里氏代换原则强调的是<code>代换</code>,单单考虑这一原则,即父类出现的地方子类必须可以代换,而不影响其功能.<br>1.在继承一个类重写其方法时,父类已经实现的功能可以扩展,尽量不要覆盖,以便不影响代换时的功能<br>2.某些方法需要子类去重写覆盖时,尽量用抽象方法来限制,如果本类也需要实现,那么可以在方法体加上注释文档,告诉子类不要完全覆盖父类的方法,(<code>Android</code>中可以使用<code>@CallSuper</code>,参考<code>Activity</code>生命周期方法)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式笔记(三)开闭原则</title>
    <link href="http://charlesandroid.github.io/2017/05/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0(%E4%B8%89)%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/"/>
    <id>http://charlesandroid.github.io/2017/05/13/设计模式笔记(三)开闭原则/</id>
    <published>2017-05-13T08:57:05.000Z</published>
    <updated>2017-05-17T10:11:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>开闭原则（OCP）是面向对象设计中“可复用设计”的基石，是面向对象设计中最重要的原则之一，其它很多的设计原则都是实现开闭原则的一种手段。对于扩展是开放的，对于修改是关闭的，这意味着模块的行为是可以扩展的。当应用的需求改变时，我们可以对模块进行扩展，使其具有满足那些改变的新行为。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="生活中"><a href="#生活中" class="headerlink" title="生活中"></a>生活中</h3><p>1.每台显示器都有电源开关,如果修改开关的位置,不应该影响开关这个功能,也不需要对内部进行改造.<br>2.每个软件,对外提供自身的功能,任何人使用,都不应该需要修改其内部实现.</p>
<h3 id="代码中"><a href="#代码中" class="headerlink" title="代码中"></a>代码中</h3><p><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/Collections.png" alt=""><br>只要实现List接口的集合,都可以通过<code>Conllections.sort</code>排序</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>提供一个打印学生信息的功能<code>printStudent</code><br><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/printStudent.png" alt=""><br>如果再增加打印老师,学校信息,类必然增加重复代码,所以通过如下设计修改<br><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/printObject.png" alt=""><br>任何对象只要继承<code>Object</code>都可以实现<code>toString</code>方法,从而使用<code>Print.printObject</code>方法打印信息</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于一个使用外部传入参数的方法,在使用参数的方法或属性的时候,尽量使传入参数具有方法内使用的共有特征,从而达到对外部提供修改的开放原则,减少或关闭对内部代码的修改.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;开闭原则（OCP）是面向对象设计中“可复用设计”的基石，是面向对象设计中最重要的原则之一，其它很多的设计原则都是实现开闭原则的一种手段。对于
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式笔记(二)单一职责原则</title>
    <link href="http://charlesandroid.github.io/2017/05/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0(%E4%BA%8C)%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/"/>
    <id>http://charlesandroid.github.io/2017/05/12/设计模式笔记(二)单一职责原则/</id>
    <published>2017-05-12T08:57:05.000Z</published>
    <updated>2017-05-17T10:10:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>单一职责原则（SRP：Single responsibility principle）又称单一功能原则,所谓职责是指类变化的原因,如果一个类有多于一个的动机被改变，那么这个类就具有多于一个的职责。而单一职责原则就是指一个类或者模块应该有且只有一个改变的原因。  </p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="生活中"><a href="#生活中" class="headerlink" title="生活中"></a>生活中</h3><p>我每天只能去到一家公司上班,负责本职工作领域</p>
<h3 id="代码中"><a href="#代码中" class="headerlink" title="代码中"></a>代码中</h3><p><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/FileUtil.png" alt=""><br>只负责操作File对象</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>作为操作File的工具类,只负责操作File对象,但有没有可能违背单一职责原则呢?答案是可能的.<br>如果现在需要提供方法,拷贝一个文件,并在目标文件末尾插入指定字符串.<br><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/FileUtil1.png" alt=""><br>如果再增加方法,拷贝一个文件,并在目标文件头部插入指定字符串.因此,FileUtil会增加更多不必要的方法,或者把<code>copyFileInsert</code>方法修改的过于庞大.应该重新把需求拆分.提供一个拷贝文件的方法<code>copyFile</code>,提供一个在文件插入字符串的方法<code>insertFile</code>,具体修改哪个文件,应该在头部添加还是尾部添加,由调用者决定,修改后结构如下:<br><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/FileUtil2.png" alt=""><br><code>insertFile</code>方法用<code>int</code>型变量来控制插入位置</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>无论设计方法,类还是模块,无论代码体积大小,都要遵循单一职责原则,尽可能的避免多因素导致的代码修改.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;单一职责原则（SRP：Single responsibility principle）又称单一功能原则,所谓职责是指类变化的原因,如果一个类
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式笔记(一)概述</title>
    <link href="http://charlesandroid.github.io/2017/05/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0(%E4%B8%80)%E6%A6%82%E8%BF%B0/"/>
    <id>http://charlesandroid.github.io/2017/05/11/设计模式笔记(一)概述/</id>
    <published>2017-05-11T08:57:01.000Z</published>
    <updated>2017-05-17T10:11:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>20世纪70年代,Christophr Alexander研究为了解决同一个问题而设计出不同的建筑结构.发现那些高质量设计中的<code>相似性</code>.用模式语言来指这种<code>相似性</code>.<br>    -A Pattern Language:Towns,Buildings,Construction(牛津大学出版社,1977年)<br>    -永久的建筑风格(牛津大学出版社,1979年)<br>由Alexander发现并记录的这些模式仅仅是涉及诸如建筑物,花园和道路之类的建筑学方面的模式.20世纪90年代逐渐的被软件工程所整合使用,由GoF归纳发表了23种在软件开发中使用频率较高的设计模式.</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>设计模式是指,<code>在某种特定的情况下,采取已经实践证明的最佳解决方案来实现需求.</code><br>程序的设计和实现来源于生活,而在特定的情况下,采取已知、最佳的方案,能更高效的实现需求.在GoF总结的23种设计模式中,包含5种创建型设计模式,7种结构型设计模式和11种行为型设计模式,根据某种设计模式的作用,又可分为类模式和对象模式<br><img src="https://raw.githubusercontent.com/charlesandroid/charlesandroid.github.io/master/img/设计模式.png" alt=""><br>设计模式是前人总结的经验,要想设计出高内聚、低耦合的程序,就要好好学习设计模式,并翻阅遵从这些设计模式设计的程序案例</p>
<h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><p>设计模式的总结,是按照一定的原则,主要分为以下7个原则  </p>
<h4 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h4><p>一段代码,一个类,一个模块只负责自己领域的工作,尽可能不参与其他领域的工作</p>
<h4 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h4><p>对外提供可修改的方法,对内避免代码修改,简称对外开放,对内关闭</p>
<h4 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h4><p>一个可以用基类(父类)表示的地方,一定可以用衍生类(子类)来表示,并且替换后原程序不受到影响</p>
<h4 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h4><p>基类(父类)不应该依赖衍生类(子类),抽象模块不应依赖具体实现</p>
<h4 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h4><p>一系列多个方法的定义,不应该定义在同一接口中,针对不同功能,编写不同接口</p>
<h4 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h4><p>使用组合,对象包含对象的关系,尽可能的少使用继承关系</p>
<h4 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h4><p>又叫最少知道原则,意为一个对象对另一个对象尽可能少的了解  </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>之所以每一种设计原则的概念解释,都用了尽可能和应该这样的词来描述,是因为设计模式虽然是建立在这些原则的基础之上总结出来的,但不代表每一种设计模式都绝对遵循这些设计原则,因此设计模式是在设计原则之上,合理的取舍总结出来的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起源&quot;&gt;&lt;a href=&quot;#起源&quot; class=&quot;headerlink&quot; title=&quot;起源&quot;&gt;&lt;/a&gt;起源&lt;/h2&gt;&lt;p&gt;20世纪70年代,Christophr Alexander研究为了解决同一个问题而设计出不同的建筑结构.发现那些高质量设计中的&lt;code&gt;相
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello Charles</title>
    <link href="http://charlesandroid.github.io/2017/05/10/hello_charles/"/>
    <id>http://charlesandroid.github.io/2017/05/10/hello_charles/</id>
    <published>2017-05-10T08:57:01.000Z</published>
    <updated>2017-05-17T09:15:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建博客&quot;&gt;&lt;a href=&quot;#创建博客&quot; class=&quot;headerlink&quot; title=&quot;创建博客&quot;&gt;&lt;/a&gt;创建博客&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
